on:
 push:
  branches:
   - master
  tags:
    - 'v*'

name: Build and deploy on Google Play Store (internal)
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: git fetch --tags
    
    - name: Generate build number
      uses: einaregilsson/build-number@v2 
      with:
        token: ${{secrets.github_token}}        
    - name: Print new build number
      run: echo "Build number is $BUILD_NUMBER"
        
    # - uses: actions/cache@v1
    #   with:
    #     path: ~/.gradle/caches
    #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
      
    - name: Make Gradle executable
      run: chmod +x ./gradlew
      
   # - name: Unit tests
   #  run: ./gradlew testDebugUnitTest
    
    - name: Build release
      run: ./gradlew :app:bundleRelease
    
    - name: Sign release
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: ./app/build/outputs/bundle/release
        signingKeyBase64: ${{ secrets.KEYSTORE_SIGNING_KEY }}
        alias: ${{ secrets.KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

      #    - uses: actions/upload-artifact@v1
      #      with:
      #        name: Release build ${{ env.BUILD_NUMBER }}
      #        path: ${{ env.SIGNED_RELEASE_FILE }}

    - name: Export Google Service account JSON
      run: echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}" | base64 --decode > google-service-account.json
    
    - name: Upload to Google Play - Internal
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: google-service-account.json
        packageName: com.example
        releaseFile: ${{ env.SIGNED_RELEASE_FILE }}
        track: internal
        mappingFile: ./app/build/outputs/mapping/release/mapping.txt
